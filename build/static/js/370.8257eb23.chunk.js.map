{"version":3,"file":"static/js/370.8257eb23.chunk.js","mappings":"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","sources":["app/reducers/addPokemonToList.ts","components/PokemonCardGrid.tsx","pages/Search.tsx","sections/Wrapper.tsx"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { addDoc } from \"firebase/firestore\";\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\nimport { getUserPokemons } from \"./getUserPokemons\";\nimport { setToast } from \"../slices/AppSlice\";\nimport {\n  pokemonStatsType,\n  pokemonTypeInterface,\n  userPokemonsType,\n} from \"../../utils/types\";\nimport { RootState } from \"../store\";\n\nexport const addPokemonToList = createAsyncThunk(\n  \"pokemon/addPkemon\",\n  async (\n    pokemon: {\n      id: number;\n      name: string;\n      types: pokemonTypeInterface[] | string[];\n      stats?: pokemonStatsType[];\n    },\n    { getState, dispatch }\n  ) => {\n    try {\n      const {\n        app: { userInfo },\n        pokemon: { userPokemons },\n      } = getState() as RootState;\n      if (!userInfo?.email) {\n        return dispatch(\n          setToast(\"Please login in order to add pokemon to your collection.\")\n        );\n      }\n      const index = userPokemons.findIndex((userPokemon: userPokemonsType) => {\n        return userPokemon.name === pokemon.name;\n      });\n      if (index === -1) {\n        let types: string[] = [];\n        if (!pokemon.stats) {\n          pokemon.types.forEach((type: any) =>\n            types.push(Object.keys(type).toString())\n          );\n        } else {\n          types = pokemon.types as string[];\n        }\n        await addDoc(pokemonListRef, {\n          pokemon: { id: pokemon.id, name: pokemon.name, types },\n          email: userInfo.email,\n        });\n        await dispatch(getUserPokemons());\n        dispatch(setToast(`${pokemon.name} added to your collection.`));\n      } else {\n        dispatch(setToast(`${pokemon.name} already part of your collection.`));\n      }\n    } catch (err) {\n      console.log({ err });\n    }\n  }\n);\n","import React from \"react\";\nimport { IoGitCompare } from \"react-icons/io5\";\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\nimport { addToCompare, setCurrentPokemon } from \"../app/slices/PokemonSlice\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { removePokemonFromUserList } from \"../app/reducers/removePokemonFromUserList\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\nimport { pokemonTabs } from \"../utils/constants\";\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  return (\n    <div className=\"pokemon-card-grid-container\">\n      <div className=\"pokemon-card-grid\">\n        {pokemons &&\n          pokemons.length > 0 &&\n          pokemons?.map((data: userPokemonsType) => {\n            return (\n              <div key={data.id} className=\"pokemon-card\">\n                <div className=\"pokemon-card-list\">\n                  {location.pathname.includes(\"/pokemon\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : location.pathname.includes(\"/search\") ? (\n                    <FaPlus\n                      className=\"plus\"\n                      onClick={() => dispatch(addPokemonToList(data))}\n                    />\n                  ) : (\n                    <FaTrash\n                      className=\"trash\"\n                      onClick={async () => {\n                        await dispatch(\n                          removePokemonFromUserList({ id: data.firebaseId! })\n                        );\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"pokemon-card-compare\">\n                  <IoGitCompare\n                    onClick={() => {\n                      dispatch(addToCompare(data));\n                      dispatch(\n                        setToast(\n                          `${data.name} has been added to compare queue.`\n                        )\n                      );\n                    }}\n                  />\n                </div>\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\n                <img\n                  src={data.image}\n                  alt=\"\"\n                  className=\"pokemon-card-image\"\n                  loading=\"lazy\"\n                  onClick={() => {\n                    dispatch(setPokemonTab(pokemonTabs.description));\n                    dispatch(setCurrentPokemon(undefined));\n                    navigate(`/pokemon/${data.id}`);\n                  }}\n                />\n                <div className=\"pokemon-card-types\">\n                  {data.types.map(\n                    (type: pokemonTypeInterface, index: number) => {\n                      const keys = Object.keys(type);\n                      return (\n                        <div className=\"pokemon-card-types-type\" key={index}>\n                          <img\n                            src={type[keys[0]].image}\n                            alt=\"pokemon type\"\n                            className=\"pokemon-card-types-type-image\"\n                            loading=\"lazy\"\n                          />\n                          <h6 className=\"pokemon-card-types-type-text\">\n                            {keys[0]}\n                          </h6>\n                        </div>\n                      );\n                    }\n                  )}\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default PokemonCardGrid;\n","// @ts-nocheck\n\nimport React, { useEffect } from \"react\";\nimport Wrapper from \"../sections/Wrapper\";\nimport { debounce } from \"../utils\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { getInitialPokemonData } from \"../app/reducers/getInitialPokemonData\";\nimport { getPokemonsData } from \"../app/reducers/getPokemonsData\";\nimport Loader from \"../components/Loader\";\nimport { setLoading } from \"../app/slices/AppSlice\";\n\nimport PokemonCardGrid from \"../components/PokemonCardGrid\";\n\nfunction Search() {\n  const handleChange = debounce((value: string) => getPokemon(value), 300);\n  const isLoading = useAppSelector(({ app: { isLoading } }) => isLoading);\n\n  const dispatch = useAppDispatch();\n  const { allPokemon, randomPokemons } = useAppSelector(\n    ({ pokemon }) => pokemon\n  );\n\n  useEffect(() => {\n    dispatch(getInitialPokemonData());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (allPokemon) {\n      const clonedPokemons = [...allPokemon];\n      const randomPokemonsId = clonedPokemons\n        .sort(() => Math.random() - Math.random())\n        .slice(0, 20);\n      dispatch(getPokemonsData(randomPokemonsId));\n    }\n  }, [allPokemon, dispatch]);\n\n  useEffect(() => {\n    if (randomPokemons) {\n      dispatch(setLoading(false));\n    }\n  }, [randomPokemons, dispatch]);\n\n  const getPokemon = async (value: string) => {\n    if (value.length) {\n      const pokemons = allPokemon.filter((pokemon) =>\n        pokemon.name.includes(value.toLowerCase())\n      );\n      dispatch(getPokemonsData(pokemons));\n    } else {\n      const clonedPokemons = [...allPokemon];\n      const randomPokemonsId = clonedPokemons\n        .sort(() => Math.random() - Math.random())\n        .slice(0, 20);\n      dispatch(getPokemonsData(randomPokemonsId));\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            onChange={(e) => handleChange(e.target.value)}\n            className=\"pokemon-searchbar\"\n            placeholder=\"Search Pokemon\"\n          />\n          <PokemonCardGrid pokemons={randomPokemons} />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Wrapper(Search);\n","import React from \"react\";\n\nconst Wrapper = (Component: React.FC) => () => {\n  return (\n    <div className=\"content\">\n      <Component />\n    </div>\n  );\n};\n\nexport default Wrapper;\n"],"names":["addPokemonToList","createAsyncThunk","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","pokemon","_ref","getState","dispatch","_ref3","userInfo","userPokemons","types","wrap","_context","prev","next","app","email","abrupt","setToast","findIndex","userPokemon","name","stats","forEach","type","push","Object","keys","toString","addDoc","pokemonListRef","id","getUserPokemons","concat","t0","console","log","err","stop","_x","_x2","apply","arguments","pokemons","useAppDispatch","navigate","useNavigate","location","useLocation","_jsx","className","children","length","map","data","_jsxs","pathname","includes","FaPlus","onClick","FaTrash","removePokemonFromUserList","firebaseId","IoGitCompare","addToCompare","src","image","alt","loading","setPokemonTab","pokemonTabs","setCurrentPokemon","undefined","index","Wrapper","handleChange","debounce","value","getPokemon","isLoading","useAppSelector","_useAppSelector","allPokemon","randomPokemons","useEffect","getInitialPokemonData","randomPokemonsId","_toConsumableArray","sort","Math","random","slice","getPokemonsData","setLoading","clonedPokemons","filter","toLowerCase","_Fragment","Loader","onChange","e","target","placeholder","PokemonCardGrid","Component"],"sourceRoot":""}